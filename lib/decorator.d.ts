import { ActionHandler, LifecycleDecoratorFlag } from "./module";
import { ModuleLifecycleListener } from "./platform/Module";
import { State } from "./reducer";
declare type HandlerDecorator = (target: object, propertyKey: string, descriptor: TypedPropertyDescriptor<ActionHandler>) => TypedPropertyDescriptor<ActionHandler>;
declare type LifecycleHandlerDecorator = (target: object, propertyKey: keyof ModuleLifecycleListener, descriptor: TypedPropertyDescriptor<ActionHandler & LifecycleDecoratorFlag>) => TypedPropertyDescriptor<ActionHandler>;
declare type HandlerInterceptor<S> = (handler: ActionHandler, rootState: Readonly<S>) => any;
export declare function createActionHandlerDecorator<S extends State = State>(interceptor: HandlerInterceptor<S>): HandlerDecorator;
export declare function Loading(identifier?: string): HandlerDecorator;
export declare function Lifecycle(): LifecycleHandlerDecorator;
export {};
